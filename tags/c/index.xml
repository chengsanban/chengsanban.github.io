<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on 橙三瓣的博客</title>
    <link>http://chengsanban.github.io/tags/c/</link>
    <description>Recent content in C on 橙三瓣的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 11 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://chengsanban.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>STL解析(8):STL配接器</title>
      <link>http://chengsanban.github.io/post/stl-adapter/</link>
      <pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chengsanban.github.io/post/stl-adapter/</guid>
      <description>一、配接器概念 配接器又称适配器，既是STL组件之一，又是一种设计模式，设计模式中给出的概念就是：把一个类的接口转换为另一个接口，使原本不能相</description>
    </item>
    
    <item>
      <title>STL解析(7):STL仿函数</title>
      <link>http://chengsanban.github.io/post/stl-func/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chengsanban.github.io/post/stl-func/</guid>
      <description>一、仿函数概念 仿函数又称函数对象，虽然是类，但是在调用的时候，却可以像函数一样的被调用，作用在哪里？这个东西，在STL算法之中仿函数可以像模</description>
    </item>
    
    <item>
      <title>STL解析(6):STL算法</title>
      <link>http://chengsanban.github.io/post/stl-algorithm/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chengsanban.github.io/post/stl-algorithm/</guid>
      <description>一、算法是什么 简单来说，算法就是解决问题的方法，那么算法就很多了，好多事件都算算法，但今天说的是STL里面那些广为人知的算法，算法是在是太多</description>
    </item>
    
    <item>
      <title>STL解析(5):STL关联式容器</title>
      <link>http://chengsanban.github.io/post/stl-container2/</link>
      <pubDate>Sun, 08 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chengsanban.github.io/post/stl-container2/</guid>
      <description>一、简说 看到上面这幅图片、关联式容器有两大类，一类的底层使用红黑树、另一类是哈希桶、有什么区别，看图： 二、底层容器介绍 既然都看到底层结构，就</description>
    </item>
    
    <item>
      <title>STL解析(4):STL序列式容器</title>
      <link>http://chengsanban.github.io/post/stl-container1/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chengsanban.github.io/post/stl-container1/</guid>
      <description>一、容器的分类 序列式容器：元素可以有序，但不一定有序的容器 关联式容器：元素内有自己的对应关系，例如set的key-value对 二、各种容器简</description>
    </item>
    
    <item>
      <title>STL解析(3):迭代器和类型萃取技术</title>
      <link>http://chengsanban.github.io/post/stl-iterator/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chengsanban.github.io/post/stl-iterator/</guid>
      <description>一、迭代器简介 迭代器的实现意义就是让外界不知道容器的具体实现的情况之下，还能遍历容器，做到最好的封装。在算法和容器之间，迭代器扮演者桥梁的角</description>
    </item>
    
    <item>
      <title>STL解析(2):STL空间配置器</title>
      <link>http://chengsanban.github.io/post/stl-allocator/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chengsanban.github.io/post/stl-allocator/</guid>
      <description>一、什么是空间配置器 空间配置器是STL用来为容器分配空间的组件。 二、本文的一点注意事项 本文解析空间配置器事宜SGI的STL为蓝本的，其中通过</description>
    </item>
    
    <item>
      <title>STL解析(1):STL产生的缘由</title>
      <link>http://chengsanban.github.io/post/stl-summary/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chengsanban.github.io/post/stl-summary/</guid>
      <description>一、STL产生的缘由 人类为什么会发展的如此之快，为什么，吃货为什么能吃到各种食物？牵强一点，拉到今天的主题，不就是因为祖先留下了好多经验和可</description>
    </item>
    
  </channel>
</rss>