<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>橙三瓣博客</title>
    <link>https://chengsanban.github.io/</link>
    <description>Recent content on 橙三瓣博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>橙三瓣</copyright>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://chengsanban.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://chengsanban.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://chengsanban.github.io/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>一、STL产生的缘由</title>
      <link>https://chengsanban.github.io/post/stl-allocator/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://chengsanban.github.io/post/stl-allocator/</guid>
      
        <description>

&lt;h2 id=&#34;一-stl产生的缘由&#34;&gt;一、STL产生的缘由&lt;/h2&gt;

&lt;p&gt;  人类为什么会发展的如此之快，为什么，吃货为什么能吃到各种食物？牵强一点，拉到今天的主题，不就是因为祖先留下了好多经验和可以借鉴的地方。所以必要时，不是另起轮子，而是站在巨人的肩膀上是很重要的。&lt;br /&gt;
  程序员也是这样一群人，大家都开始时，自己做自己的事情，可是大家最后发现，天哪，每个人都在重复好多工作，同样一个排序写成千上万遍，同样一个数据结构写成千上万变，这时候，大家就觉得心好累，一个人说，哈哈，让我们用共同的智商来写一个模板一样大家都可以用上的东西，社区们都动作起来，这样就有了STL，大家就可以用前面伟大的程序员写的“轮子”了，每个人都只用关系自己的具体功能了，而不用再关心数据怎么储存之类的鸡毛小事了，总不能，我写个hello，world还要写机器驱动吧，当然还有boost库，很多智慧的结晶。&lt;/p&gt;

&lt;h2 id=&#34;二-stl的基本架构&#34;&gt;二、STL的基本架构&lt;/h2&gt;

&lt;p&gt;  STL六大组件：容器、算法、迭代器、配接器、空间配置器、仿函数&lt;br /&gt;
&lt;strong&gt;容器&lt;/strong&gt;：是各种数据结构，vector、list、deque、set、map等，用来放数据，毕竟程序运行的基础是数据。&lt;br /&gt;
&lt;strong&gt;算法&lt;/strong&gt;：对于容器的数据进行操作，进行排序、搜索、复制、删除等各种操作。&lt;br /&gt;
&lt;strong&gt;迭代器&lt;/strong&gt;：等于说是容器和算法之间的胶合剂，说的通俗一点，容器并不想要其它东西直接看见自己的数据、所以它做了一个东西也就是迭代器;让迭代器来访问自己的数据，交接口给算法。就和古代的皇上并不是谁都能见，也不安全，所以都会有一个太监来传送消息一样。&lt;br /&gt;
&lt;strong&gt;仿函数&lt;/strong&gt;：像函数一样、可算作算法的某种策略、经常用重载类模板实现。&lt;br /&gt;
&lt;strong&gt;配接器&lt;/strong&gt;：用来修饰容器、仿函数、或者迭代器、像queue底部其实由deque实现，其实只算是一种修饰过的容器，也就是配接器而已。改变函数或者迭代器接口也算作修饰而已。&lt;br /&gt;
&lt;strong&gt;配置器&lt;/strong&gt;：负责容器空间的配置与释放
&lt;img src=&#34;https://chengsanban.github.io/image/stl-reason-all.png&#34; alt=&#34;关系图&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>